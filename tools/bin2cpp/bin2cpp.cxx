/*
  This file is part of the DSP-Crowd project
  https://www.dsp-crowd.com

  Author(s):
      - Johannes Natter, office@dsp-crowd.com

  Copyright (C) 2017, Johannes Natter
*/

#include <iostream>
#include <iomanip>
#include <fstream>
#include <iterator>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;

int main(int argc, char *argv[])
{
	if (argc < 3)
	{
		cerr << "usage: bin2cpp <output file> <input files>" << endl;
		return 1;
	}

	string nameCpp(argv[1]);
	string nameOut = nameCpp.substr(0, nameCpp.find("."));
	string nameHpp = nameOut + ".h";

	ofstream fHpp(nameHpp, ios::binary);
	ofstream fCpp(nameCpp, ios::binary);

	nameOut = nameOut.substr(nameOut.rfind("/") + 1);

	string nameOutU;
	for (string::iterator iter = nameOut.begin(); iter != nameOut.end(); ++iter)
		nameOutU += toupper(*iter);

	fHpp << endl;
	fHpp << "/* Autogenerated by DSP-Crowds bin2cpp */" << endl;
	fHpp << endl;

	string guard = nameOutU + "_H";
	fHpp << "#ifndef " << guard << endl;
	fHpp << "#define " << guard << endl;
	fHpp << endl;
#if 0
	fHpp << "#ifdef __cplusplus" << endl;
	fHpp << "extern \"C\" {" << endl;
	fHpp << "#endif" << endl;
	fHpp << endl;
#endif
	fHpp << "#include \"Res.h\"" << endl;
	fHpp << endl;

	string namePtr = nameOut;
	namePtr[0] = toupper(namePtr[0]);

	fHpp << "extern const Resource ";
	fHpp << nameOut;
	fHpp << "[];" << endl;

	fHpp << "extern const Resource *p";
	fHpp << namePtr;
	fHpp << "End;" << endl;

	fHpp << endl;
#if 0
	fHpp << "#ifdef __cplusplus" << endl;
	fHpp << "} /* extern \"C\" */" << endl;
	fHpp << "#endif" << endl;
	fHpp << endl;
#endif
	fHpp << "#endif /* " << guard << " */" << endl;
	fHpp << endl;

	fCpp << endl;
	fCpp << "/* Autogenerated by DSP-Crowds bin2cpp */" << endl;
	fCpp << endl;

	fCpp << "#include \"" << nameOut << ".h\"" << endl;
	fCpp << endl;

	for (int i = 2; i < argc; ++i)
	{
		string nameIn(argv[i]);

		ifstream fIn(nameIn, ios::binary);
		vector<unsigned char> bufIn(istreambuf_iterator<char>(fIn), {});
		vector<unsigned char>::iterator iter;

		nameIn = nameIn.substr(nameIn.rfind("/") + 1);
		replace(nameIn.begin(), nameIn.end(), '.', '_');
		replace(nameIn.begin(), nameIn.end(), '-', '_');

		fCpp << "const unsigned char " << nameIn << "[] =" << endl;
		fCpp << "{" << endl;

		int dataIdx = 0;

		iter = bufIn.begin();
		for (; iter != bufIn.end(); ++iter)
		{
			fCpp << "0x" << hex << setw(2) << setfill('0') << ((int)*iter) << ",";

			++dataIdx;
			if (dataIdx < 16)
			{
				fCpp << " ";
				continue;
			}

			fCpp << endl;
			dataIdx = 0;
		}

		fCpp << "0,";
		fCpp << endl;
		fCpp << "};" << endl;
		fCpp << endl;

		fCpp << "const size_t " << nameIn << "_len = " << dec << bufIn.size() << ";" << endl;
		fCpp << endl;
	}

	fCpp << "const Resource ";
	fCpp << nameOut;
	fCpp << "[] =" << endl;
	fCpp << "{" << endl;

	for (int i = 2; i < argc; ++i)
	{
		string nameIn(argv[i]);

		nameIn = nameIn.substr(nameIn.rfind("/") + 1);
		replace(nameIn.begin(), nameIn.end(), '.', '_');
		replace(nameIn.begin(), nameIn.end(), '-', '_');

		fCpp << "\t{\"" << nameIn << "\",\t\t(const char *)" << nameIn << ",\t\t" << nameIn << "_len}," << endl;
	}

	fCpp << "};" << endl;
	fCpp << endl;

	fCpp << "const Resource *p";
	fCpp << namePtr;
	fCpp << "End = resources + sizeof(resources) / sizeof(resources[0]);" << endl;
	fCpp << endl;

	return 0;
}
